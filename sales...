# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.ensemble import RandomForestRegressor

# Load the dataset (replace with your dataset path)
df = pd.read_csv('Advertising.csv')

# Inspect the dataset
print(df.head())

# Check for missing values
print(df.isnull().sum())

# Descriptive statistics
print(df.describe())

# Features (TV, Radio, Newspaper) and Target (Sales)
X = df[['TV', 'Radio', 'Newspaper']]  # Features
y = df['Sales']  # Target

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the Linear Regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Predict sales on the test data
y_pred_lr = lr_model.predict(X_test)

# Initialize and train the Random Forest Regressor (alternative model)
rf_model = RandomForestRegressor(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)

# Predict sales on the test data using Random Forest
y_pred_rf = rf_model.predict(X_test)

# Model Evaluation - Linear Regression
print("Linear Regression Evaluation:")
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred_lr))
print("Root Mean Squared Error (RMSE):", np.sqrt(mean_squared_error(y_test, y_pred_lr)))
print("R² Score:", r2_score(y_test, y_pred_lr))

# Model Evaluation - Random Forest
print("\nRandom Forest Evaluation:")
print("Mean Absolute Error (MAE):", mean_absolute_error(y_test, y_pred_rf))
print("Root Mean Squared Error (RMSE):", np.sqrt(mean_squared_error(y_test, y_pred_rf)))
print("R² Score:", r2_score(y_test, y_pred_rf))

# Plotting the actual vs predicted sales for Linear Regression
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred_lr, color='blue', label='Linear Regression Predictions')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label='Perfect Fit')
plt.xlabel('Actual Sales')
plt.ylabel('Predicted Sales')
plt.title('Actual vs Predicted Sales (Linear Regression)')
plt.legend()
plt.show()

# Plotting the feature importances for Random Forest Regressor
importances = rf_model.feature_importances_
features = X.columns
indices = np.argsort(importances)

plt.figure(figsize=(8, 6))
plt.title('Feature Importance (Random Forest)')
plt.barh(range(len(indices)), importances[indices], color='green', align='center')
plt.yticks(range(len(indices)), [features[i] for i in indices])
plt.xlabel('Relative Importance')
plt.show()
